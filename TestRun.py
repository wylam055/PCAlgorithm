#######################################################################################################################
from GraphClass import tetradToCausalGraph, subgraph
from PC import pcAlgorithm
import numpy as np
#######################################################################################################################

#######################################################################################################################
### Find the estimated graph ##########################################################################################
#######################################################################################################################
data_path = "test/test_data.txt"
data = np.loadtxt(data_path, skiprows=1)                  # Import the file at data_path as data
cg = pcAlgorithm(data, 0.05, "Fisher_Z", True, 0, -1)     # Run PC and obtain the estimated graph (CausalGraph object)
cg.rearrange(data_path)                                   # Rearrange the columns in accord with the order in the data

#######################################################################################################################
### Draw the estimated graph ##########################################################################################
#######################################################################################################################
cg.toNxGraph()
cg.toNxSkeleton()
cg.printSummary()
cg.drawNxGraph(skel=False)                                # Draw the estimated graph (or its skeleton)

#######################################################################################################################
### Output the estimated graph as a TXT file which is readable by TETRAD ##############################################
#######################################################################################################################
output_path = "test/test_output_graph.txt"
cg.toTetradTxt(output_path)

#######################################################################################################################
### Obtain a subgraph #################################################################################################
#######################################################################################################################
# sub_cg = subgraph(cg, [0, 1, 2, 3, 5, 16, 17, 18])
# sub_cg.printSummary()
# sub_cg.drawNxGraph(skel=False)

#######################################################################################################################
### Import the true DAG ###############################################################################################
#######################################################################################################################
truth_path = "test/test_true_graph.txt"
truth = tetradToCausalGraph(truth_path)

#######################################################################################################################
### Obtain performance statistics by comparing the estimated graph with the true DAG (or true pattern) ################
#######################################################################################################################
stat_list = cg.comparison(truth, compare_pattern = True, adj_only = False, uc_also = True, print_to_console = True)

#######################################################################################################################
